@using AutoComplete_App.Models
@rendermode InteractiveServer

@inject AutoComplete_App.Services.CallApi CallApi

<div class="form-group row">
    <label class="col-sm-1 col-form-label">Negara</label>
    <div class="col-sm-10">
        <input @bind="@Country" @bind:after="CountryFill" placeholder="Type First 3 Letters"/>
        <p>@UrlCountry</p>
    </div>
</div>

<div class="form-group row">
    <label class="col-sm-1 col-form-label">Pelabuhan</label>
    <div class="col-sm-10">
        <input @bind="@SeaPort" @bind:after="PortFill" placeholder="Type First 3 Letters" />
        <p>@UrlPort</p>
    </div>
</div>

@code {
    [Parameter]
    public string Country { get; set; }

    [Parameter]
    public EventCallback<string> CountryChanged { get; set; }

    [Parameter]
    public string SeaPort { get; set; }

    [Parameter]
    public EventCallback<string> SeaPortChanged { get; set; }

    Country[] countries;
    SeaPort[] portList;

    string KD = "";
    string UrlCountry = "https://insw-dev.ilcs.co.id/n/negara?ur_negara=";
    string UrlPort = "https://insw-dev.ilcs.co.id/n/pelabuhan?kd_negara=KD&ur_pelabuhan='PORTNAME'";

    protected override async Task OnInitializedAsync()
    {
        CallApi.ReadCountry();
        if (CallApi.Countries != null)
        {
            countries = CallApi.Countries;
        }

        CallApi.ReadPortList();
        if(CallApi.Ports != null)
        {
            portList = CallApi.Ports;
        }
    }

    private void CountryFill()
    {
        bool match = false;
        if (Country.Length >= 3)
        {
            foreach (var c in countries)
            {
                if (c.Name.ToUpper().Contains(Country.ToUpper()))
                {
                    match = true;
                    Country = c.Name.ToUpper();
                    KD = c.Code;
                    UrlCountry = $"https://insw-dev.ilcs.co.id/n/negara?ur_negara={Country}";
                    UrlPort = $"https://insw-dev.ilcs.co.id/n/pelabuhan?kd_negara={KD}&ur_pelabuhan={SeaPort}";
                    return;
                }
            }
        }
        if(match == false)
        {
            Country = Country;
            KD = "KD";
            UrlCountry = "Country Not Found";
        }
    }
    private void PortFill()
    {
        bool match = false;
        if (SeaPort.Length >= 3)
        {
            foreach (var p in portList)
            {
                if(p.Name.ToUpper().Contains(SeaPort.ToUpper()) && p.Country.ToUpper().Equals(Country.ToUpper()))
                {
                    match = true;
                    SeaPort = p.Name.ToUpper();
                    UrlPort = $"https://insw-dev.ilcs.co.id/n/pelabuhan?kd_negara={KD}&ur_pelabuhan={SeaPort}";
                    return;
                }
            }
        }
        if(match == false)
        {
            SeaPort = SeaPort;
            UrlPort = "SeaPort Not Found, Please Make Sure The Country And Ports Are Valid";
        }
    }
}